/*
 * Mux API
 *
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Mux.Csharp.Sdk.Client;
using Mux.Csharp.Sdk.Model;

namespace Mux.Csharp.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITranscriptionVocabulariesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a Transcription Vocabulary
        /// </summary>
        /// <remarks>
        /// Create a new Transcription Vocabulary.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTranscriptionVocabularyRequest"></param>
        /// <returns>TranscriptionVocabularyResponse</returns>
        TranscriptionVocabularyResponse CreateTranscriptionVocabulary(CreateTranscriptionVocabularyRequest createTranscriptionVocabularyRequest);

        /// <summary>
        /// Create a Transcription Vocabulary
        /// </summary>
        /// <remarks>
        /// Create a new Transcription Vocabulary.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTranscriptionVocabularyRequest"></param>
        /// <returns>ApiResponse of TranscriptionVocabularyResponse</returns>
        ApiResponse<TranscriptionVocabularyResponse> CreateTranscriptionVocabularyWithHttpInfo(CreateTranscriptionVocabularyRequest createTranscriptionVocabularyRequest);
        /// <summary>
        /// Delete a Transcription Vocabulary
        /// </summary>
        /// <remarks>
        /// Deletes a Transcription Vocabulary. The Transcription Vocabulary&#39;s ID will be disassociated from any live streams using it. Transcription Vocabularies can be deleted while associated live streams are active. However, the words and phrases in the deleted Transcription Vocabulary will remain attached to those streams while they are active.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="TRANSCRIPTION_VOCABULARY_ID">The ID of the Transcription Vocabulary.</param>
        /// <returns></returns>
        void DeleteTranscriptionVocabulary(string TRANSCRIPTION_VOCABULARY_ID);

        /// <summary>
        /// Delete a Transcription Vocabulary
        /// </summary>
        /// <remarks>
        /// Deletes a Transcription Vocabulary. The Transcription Vocabulary&#39;s ID will be disassociated from any live streams using it. Transcription Vocabularies can be deleted while associated live streams are active. However, the words and phrases in the deleted Transcription Vocabulary will remain attached to those streams while they are active.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="TRANSCRIPTION_VOCABULARY_ID">The ID of the Transcription Vocabulary.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTranscriptionVocabularyWithHttpInfo(string TRANSCRIPTION_VOCABULARY_ID);
        /// <summary>
        /// Retrieve a Transcription Vocabulary
        /// </summary>
        /// <remarks>
        /// Retrieves the details of a Transcription Vocabulary that has previously been created. Supply the unique Transcription Vocabulary ID and Mux will return the corresponding Transcription Vocabulary information. The same information is returned when creating a Transcription Vocabulary.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="TRANSCRIPTION_VOCABULARY_ID">The ID of the Transcription Vocabulary.</param>
        /// <returns>TranscriptionVocabularyResponse</returns>
        TranscriptionVocabularyResponse GetTranscriptionVocabulary(string TRANSCRIPTION_VOCABULARY_ID);

        /// <summary>
        /// Retrieve a Transcription Vocabulary
        /// </summary>
        /// <remarks>
        /// Retrieves the details of a Transcription Vocabulary that has previously been created. Supply the unique Transcription Vocabulary ID and Mux will return the corresponding Transcription Vocabulary information. The same information is returned when creating a Transcription Vocabulary.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="TRANSCRIPTION_VOCABULARY_ID">The ID of the Transcription Vocabulary.</param>
        /// <returns>ApiResponse of TranscriptionVocabularyResponse</returns>
        ApiResponse<TranscriptionVocabularyResponse> GetTranscriptionVocabularyWithHttpInfo(string TRANSCRIPTION_VOCABULARY_ID);
        /// <summary>
        /// List Transcription Vocabularies
        /// </summary>
        /// <remarks>
        /// List all Transcription Vocabularies.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to include in the response (optional, default to 10)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <returns>ListTranscriptionVocabulariesResponse</returns>
        ListTranscriptionVocabulariesResponse ListTranscriptionVocabularies(int? limit = default(int?), int? page = default(int?));

        /// <summary>
        /// List Transcription Vocabularies
        /// </summary>
        /// <remarks>
        /// List all Transcription Vocabularies.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to include in the response (optional, default to 10)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <returns>ApiResponse of ListTranscriptionVocabulariesResponse</returns>
        ApiResponse<ListTranscriptionVocabulariesResponse> ListTranscriptionVocabulariesWithHttpInfo(int? limit = default(int?), int? page = default(int?));
        /// <summary>
        /// Update a Transcription Vocabulary
        /// </summary>
        /// <remarks>
        /// Updates the details of a previously-created Transcription Vocabulary. Updates to Transcription Vocabularies are allowed while associated live streams are active. However, updates will not be applied to those streams while they are active.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="TRANSCRIPTION_VOCABULARY_ID">The ID of the Transcription Vocabulary.</param>
        /// <param name="updateTranscriptionVocabularyRequest"></param>
        /// <returns>TranscriptionVocabularyResponse</returns>
        TranscriptionVocabularyResponse UpdateTranscriptionVocabulary(string TRANSCRIPTION_VOCABULARY_ID, UpdateTranscriptionVocabularyRequest updateTranscriptionVocabularyRequest);

        /// <summary>
        /// Update a Transcription Vocabulary
        /// </summary>
        /// <remarks>
        /// Updates the details of a previously-created Transcription Vocabulary. Updates to Transcription Vocabularies are allowed while associated live streams are active. However, updates will not be applied to those streams while they are active.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="TRANSCRIPTION_VOCABULARY_ID">The ID of the Transcription Vocabulary.</param>
        /// <param name="updateTranscriptionVocabularyRequest"></param>
        /// <returns>ApiResponse of TranscriptionVocabularyResponse</returns>
        ApiResponse<TranscriptionVocabularyResponse> UpdateTranscriptionVocabularyWithHttpInfo(string TRANSCRIPTION_VOCABULARY_ID, UpdateTranscriptionVocabularyRequest updateTranscriptionVocabularyRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITranscriptionVocabulariesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a Transcription Vocabulary
        /// </summary>
        /// <remarks>
        /// Create a new Transcription Vocabulary.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTranscriptionVocabularyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TranscriptionVocabularyResponse</returns>
        System.Threading.Tasks.Task<TranscriptionVocabularyResponse> CreateTranscriptionVocabularyAsync(CreateTranscriptionVocabularyRequest createTranscriptionVocabularyRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a Transcription Vocabulary
        /// </summary>
        /// <remarks>
        /// Create a new Transcription Vocabulary.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTranscriptionVocabularyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TranscriptionVocabularyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TranscriptionVocabularyResponse>> CreateTranscriptionVocabularyWithHttpInfoAsync(CreateTranscriptionVocabularyRequest createTranscriptionVocabularyRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a Transcription Vocabulary
        /// </summary>
        /// <remarks>
        /// Deletes a Transcription Vocabulary. The Transcription Vocabulary&#39;s ID will be disassociated from any live streams using it. Transcription Vocabularies can be deleted while associated live streams are active. However, the words and phrases in the deleted Transcription Vocabulary will remain attached to those streams while they are active.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="TRANSCRIPTION_VOCABULARY_ID">The ID of the Transcription Vocabulary.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTranscriptionVocabularyAsync(string TRANSCRIPTION_VOCABULARY_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a Transcription Vocabulary
        /// </summary>
        /// <remarks>
        /// Deletes a Transcription Vocabulary. The Transcription Vocabulary&#39;s ID will be disassociated from any live streams using it. Transcription Vocabularies can be deleted while associated live streams are active. However, the words and phrases in the deleted Transcription Vocabulary will remain attached to those streams while they are active.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="TRANSCRIPTION_VOCABULARY_ID">The ID of the Transcription Vocabulary.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTranscriptionVocabularyWithHttpInfoAsync(string TRANSCRIPTION_VOCABULARY_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a Transcription Vocabulary
        /// </summary>
        /// <remarks>
        /// Retrieves the details of a Transcription Vocabulary that has previously been created. Supply the unique Transcription Vocabulary ID and Mux will return the corresponding Transcription Vocabulary information. The same information is returned when creating a Transcription Vocabulary.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="TRANSCRIPTION_VOCABULARY_ID">The ID of the Transcription Vocabulary.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TranscriptionVocabularyResponse</returns>
        System.Threading.Tasks.Task<TranscriptionVocabularyResponse> GetTranscriptionVocabularyAsync(string TRANSCRIPTION_VOCABULARY_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a Transcription Vocabulary
        /// </summary>
        /// <remarks>
        /// Retrieves the details of a Transcription Vocabulary that has previously been created. Supply the unique Transcription Vocabulary ID and Mux will return the corresponding Transcription Vocabulary information. The same information is returned when creating a Transcription Vocabulary.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="TRANSCRIPTION_VOCABULARY_ID">The ID of the Transcription Vocabulary.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TranscriptionVocabularyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TranscriptionVocabularyResponse>> GetTranscriptionVocabularyWithHttpInfoAsync(string TRANSCRIPTION_VOCABULARY_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Transcription Vocabularies
        /// </summary>
        /// <remarks>
        /// List all Transcription Vocabularies.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to include in the response (optional, default to 10)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListTranscriptionVocabulariesResponse</returns>
        System.Threading.Tasks.Task<ListTranscriptionVocabulariesResponse> ListTranscriptionVocabulariesAsync(int? limit = default(int?), int? page = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Transcription Vocabularies
        /// </summary>
        /// <remarks>
        /// List all Transcription Vocabularies.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to include in the response (optional, default to 10)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListTranscriptionVocabulariesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListTranscriptionVocabulariesResponse>> ListTranscriptionVocabulariesWithHttpInfoAsync(int? limit = default(int?), int? page = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a Transcription Vocabulary
        /// </summary>
        /// <remarks>
        /// Updates the details of a previously-created Transcription Vocabulary. Updates to Transcription Vocabularies are allowed while associated live streams are active. However, updates will not be applied to those streams while they are active.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="TRANSCRIPTION_VOCABULARY_ID">The ID of the Transcription Vocabulary.</param>
        /// <param name="updateTranscriptionVocabularyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TranscriptionVocabularyResponse</returns>
        System.Threading.Tasks.Task<TranscriptionVocabularyResponse> UpdateTranscriptionVocabularyAsync(string TRANSCRIPTION_VOCABULARY_ID, UpdateTranscriptionVocabularyRequest updateTranscriptionVocabularyRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a Transcription Vocabulary
        /// </summary>
        /// <remarks>
        /// Updates the details of a previously-created Transcription Vocabulary. Updates to Transcription Vocabularies are allowed while associated live streams are active. However, updates will not be applied to those streams while they are active.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="TRANSCRIPTION_VOCABULARY_ID">The ID of the Transcription Vocabulary.</param>
        /// <param name="updateTranscriptionVocabularyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TranscriptionVocabularyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TranscriptionVocabularyResponse>> UpdateTranscriptionVocabularyWithHttpInfoAsync(string TRANSCRIPTION_VOCABULARY_ID, UpdateTranscriptionVocabularyRequest updateTranscriptionVocabularyRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITranscriptionVocabulariesApi : ITranscriptionVocabulariesApiSync, ITranscriptionVocabulariesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TranscriptionVocabulariesApi : ITranscriptionVocabulariesApi
    {
        private Mux.Csharp.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TranscriptionVocabulariesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TranscriptionVocabulariesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TranscriptionVocabulariesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TranscriptionVocabulariesApi(string basePath)
        {
            this.Configuration = Mux.Csharp.Sdk.Client.Configuration.MergeConfigurations(
                Mux.Csharp.Sdk.Client.GlobalConfiguration.Instance,
                new Mux.Csharp.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Mux.Csharp.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Mux.Csharp.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Mux.Csharp.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TranscriptionVocabulariesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TranscriptionVocabulariesApi(Mux.Csharp.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException(nameof(configuration));

            this.Configuration = Mux.Csharp.Sdk.Client.Configuration.MergeConfigurations(
                Mux.Csharp.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Mux.Csharp.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Mux.Csharp.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Mux.Csharp.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TranscriptionVocabulariesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TranscriptionVocabulariesApi(Mux.Csharp.Sdk.Client.ISynchronousClient client, Mux.Csharp.Sdk.Client.IAsynchronousClient asyncClient, Mux.Csharp.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException(nameof(client));
            if (asyncClient == null) throw new ArgumentNullException(nameof(asyncClient));
            if (configuration == null) throw new ArgumentNullException(nameof(configuration));

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Mux.Csharp.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Mux.Csharp.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Mux.Csharp.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Mux.Csharp.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Mux.Csharp.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a Transcription Vocabulary Create a new Transcription Vocabulary.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTranscriptionVocabularyRequest"></param>
        /// <returns>TranscriptionVocabularyResponse</returns>
        public TranscriptionVocabularyResponse CreateTranscriptionVocabulary(CreateTranscriptionVocabularyRequest createTranscriptionVocabularyRequest)
        {
            Mux.Csharp.Sdk.Client.ApiResponse<TranscriptionVocabularyResponse> localVarResponse = CreateTranscriptionVocabularyWithHttpInfo(createTranscriptionVocabularyRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Transcription Vocabulary Create a new Transcription Vocabulary.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTranscriptionVocabularyRequest"></param>
        /// <returns>ApiResponse of TranscriptionVocabularyResponse</returns>
        public Mux.Csharp.Sdk.Client.ApiResponse<TranscriptionVocabularyResponse> CreateTranscriptionVocabularyWithHttpInfo(CreateTranscriptionVocabularyRequest createTranscriptionVocabularyRequest)
        {
            // verify the required parameter 'createTranscriptionVocabularyRequest' is set
            if (createTranscriptionVocabularyRequest == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'createTranscriptionVocabularyRequest' when calling TranscriptionVocabulariesApi->CreateTranscriptionVocabulary");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createTranscriptionVocabularyRequest;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TranscriptionVocabularyResponse>("/video/v1/transcription-vocabularies", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTranscriptionVocabulary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Transcription Vocabulary Create a new Transcription Vocabulary.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTranscriptionVocabularyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TranscriptionVocabularyResponse</returns>
        public async System.Threading.Tasks.Task<TranscriptionVocabularyResponse> CreateTranscriptionVocabularyAsync(CreateTranscriptionVocabularyRequest createTranscriptionVocabularyRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<TranscriptionVocabularyResponse> localVarResponse = await CreateTranscriptionVocabularyWithHttpInfoAsync(createTranscriptionVocabularyRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Transcription Vocabulary Create a new Transcription Vocabulary.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTranscriptionVocabularyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TranscriptionVocabularyResponse)</returns>
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<TranscriptionVocabularyResponse>> CreateTranscriptionVocabularyWithHttpInfoAsync(CreateTranscriptionVocabularyRequest createTranscriptionVocabularyRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createTranscriptionVocabularyRequest' is set
            if (createTranscriptionVocabularyRequest == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'createTranscriptionVocabularyRequest' when calling TranscriptionVocabulariesApi->CreateTranscriptionVocabulary");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createTranscriptionVocabularyRequest;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TranscriptionVocabularyResponse>("/video/v1/transcription-vocabularies", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTranscriptionVocabulary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Transcription Vocabulary Deletes a Transcription Vocabulary. The Transcription Vocabulary&#39;s ID will be disassociated from any live streams using it. Transcription Vocabularies can be deleted while associated live streams are active. However, the words and phrases in the deleted Transcription Vocabulary will remain attached to those streams while they are active.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="TRANSCRIPTION_VOCABULARY_ID">The ID of the Transcription Vocabulary.</param>
        /// <returns></returns>
        public void DeleteTranscriptionVocabulary(string TRANSCRIPTION_VOCABULARY_ID)
        {
            DeleteTranscriptionVocabularyWithHttpInfo(TRANSCRIPTION_VOCABULARY_ID);
        }

        /// <summary>
        /// Delete a Transcription Vocabulary Deletes a Transcription Vocabulary. The Transcription Vocabulary&#39;s ID will be disassociated from any live streams using it. Transcription Vocabularies can be deleted while associated live streams are active. However, the words and phrases in the deleted Transcription Vocabulary will remain attached to those streams while they are active.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="TRANSCRIPTION_VOCABULARY_ID">The ID of the Transcription Vocabulary.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Mux.Csharp.Sdk.Client.ApiResponse<Object> DeleteTranscriptionVocabularyWithHttpInfo(string TRANSCRIPTION_VOCABULARY_ID)
        {
            // verify the required parameter 'TRANSCRIPTION_VOCABULARY_ID' is set
            if (TRANSCRIPTION_VOCABULARY_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'TRANSCRIPTION_VOCABULARY_ID' when calling TranscriptionVocabulariesApi->DeleteTranscriptionVocabulary");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("TRANSCRIPTION_VOCABULARY_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(TRANSCRIPTION_VOCABULARY_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/video/v1/transcription-vocabularies/{TRANSCRIPTION_VOCABULARY_ID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTranscriptionVocabulary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Transcription Vocabulary Deletes a Transcription Vocabulary. The Transcription Vocabulary&#39;s ID will be disassociated from any live streams using it. Transcription Vocabularies can be deleted while associated live streams are active. However, the words and phrases in the deleted Transcription Vocabulary will remain attached to those streams while they are active.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="TRANSCRIPTION_VOCABULARY_ID">The ID of the Transcription Vocabulary.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTranscriptionVocabularyAsync(string TRANSCRIPTION_VOCABULARY_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteTranscriptionVocabularyWithHttpInfoAsync(TRANSCRIPTION_VOCABULARY_ID, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a Transcription Vocabulary Deletes a Transcription Vocabulary. The Transcription Vocabulary&#39;s ID will be disassociated from any live streams using it. Transcription Vocabularies can be deleted while associated live streams are active. However, the words and phrases in the deleted Transcription Vocabulary will remain attached to those streams while they are active.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="TRANSCRIPTION_VOCABULARY_ID">The ID of the Transcription Vocabulary.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<Object>> DeleteTranscriptionVocabularyWithHttpInfoAsync(string TRANSCRIPTION_VOCABULARY_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'TRANSCRIPTION_VOCABULARY_ID' is set
            if (TRANSCRIPTION_VOCABULARY_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'TRANSCRIPTION_VOCABULARY_ID' when calling TranscriptionVocabulariesApi->DeleteTranscriptionVocabulary");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("TRANSCRIPTION_VOCABULARY_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(TRANSCRIPTION_VOCABULARY_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/video/v1/transcription-vocabularies/{TRANSCRIPTION_VOCABULARY_ID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTranscriptionVocabulary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Transcription Vocabulary Retrieves the details of a Transcription Vocabulary that has previously been created. Supply the unique Transcription Vocabulary ID and Mux will return the corresponding Transcription Vocabulary information. The same information is returned when creating a Transcription Vocabulary.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="TRANSCRIPTION_VOCABULARY_ID">The ID of the Transcription Vocabulary.</param>
        /// <returns>TranscriptionVocabularyResponse</returns>
        public TranscriptionVocabularyResponse GetTranscriptionVocabulary(string TRANSCRIPTION_VOCABULARY_ID)
        {
            Mux.Csharp.Sdk.Client.ApiResponse<TranscriptionVocabularyResponse> localVarResponse = GetTranscriptionVocabularyWithHttpInfo(TRANSCRIPTION_VOCABULARY_ID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Transcription Vocabulary Retrieves the details of a Transcription Vocabulary that has previously been created. Supply the unique Transcription Vocabulary ID and Mux will return the corresponding Transcription Vocabulary information. The same information is returned when creating a Transcription Vocabulary.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="TRANSCRIPTION_VOCABULARY_ID">The ID of the Transcription Vocabulary.</param>
        /// <returns>ApiResponse of TranscriptionVocabularyResponse</returns>
        public Mux.Csharp.Sdk.Client.ApiResponse<TranscriptionVocabularyResponse> GetTranscriptionVocabularyWithHttpInfo(string TRANSCRIPTION_VOCABULARY_ID)
        {
            // verify the required parameter 'TRANSCRIPTION_VOCABULARY_ID' is set
            if (TRANSCRIPTION_VOCABULARY_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'TRANSCRIPTION_VOCABULARY_ID' when calling TranscriptionVocabulariesApi->GetTranscriptionVocabulary");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("TRANSCRIPTION_VOCABULARY_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(TRANSCRIPTION_VOCABULARY_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TranscriptionVocabularyResponse>("/video/v1/transcription-vocabularies/{TRANSCRIPTION_VOCABULARY_ID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTranscriptionVocabulary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Transcription Vocabulary Retrieves the details of a Transcription Vocabulary that has previously been created. Supply the unique Transcription Vocabulary ID and Mux will return the corresponding Transcription Vocabulary information. The same information is returned when creating a Transcription Vocabulary.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="TRANSCRIPTION_VOCABULARY_ID">The ID of the Transcription Vocabulary.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TranscriptionVocabularyResponse</returns>
        public async System.Threading.Tasks.Task<TranscriptionVocabularyResponse> GetTranscriptionVocabularyAsync(string TRANSCRIPTION_VOCABULARY_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<TranscriptionVocabularyResponse> localVarResponse = await GetTranscriptionVocabularyWithHttpInfoAsync(TRANSCRIPTION_VOCABULARY_ID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Transcription Vocabulary Retrieves the details of a Transcription Vocabulary that has previously been created. Supply the unique Transcription Vocabulary ID and Mux will return the corresponding Transcription Vocabulary information. The same information is returned when creating a Transcription Vocabulary.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="TRANSCRIPTION_VOCABULARY_ID">The ID of the Transcription Vocabulary.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TranscriptionVocabularyResponse)</returns>
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<TranscriptionVocabularyResponse>> GetTranscriptionVocabularyWithHttpInfoAsync(string TRANSCRIPTION_VOCABULARY_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'TRANSCRIPTION_VOCABULARY_ID' is set
            if (TRANSCRIPTION_VOCABULARY_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'TRANSCRIPTION_VOCABULARY_ID' when calling TranscriptionVocabulariesApi->GetTranscriptionVocabulary");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("TRANSCRIPTION_VOCABULARY_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(TRANSCRIPTION_VOCABULARY_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TranscriptionVocabularyResponse>("/video/v1/transcription-vocabularies/{TRANSCRIPTION_VOCABULARY_ID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTranscriptionVocabulary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Transcription Vocabularies List all Transcription Vocabularies.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to include in the response (optional, default to 10)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <returns>ListTranscriptionVocabulariesResponse</returns>
        public ListTranscriptionVocabulariesResponse ListTranscriptionVocabularies(int? limit = default(int?), int? page = default(int?))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<ListTranscriptionVocabulariesResponse> localVarResponse = ListTranscriptionVocabulariesWithHttpInfo(limit, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Transcription Vocabularies List all Transcription Vocabularies.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to include in the response (optional, default to 10)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <returns>ApiResponse of ListTranscriptionVocabulariesResponse</returns>
        public Mux.Csharp.Sdk.Client.ApiResponse<ListTranscriptionVocabulariesResponse> ListTranscriptionVocabulariesWithHttpInfo(int? limit = default(int?), int? page = default(int?))
        {
            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListTranscriptionVocabulariesResponse>("/video/v1/transcription-vocabularies", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTranscriptionVocabularies", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Transcription Vocabularies List all Transcription Vocabularies.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to include in the response (optional, default to 10)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListTranscriptionVocabulariesResponse</returns>
        public async System.Threading.Tasks.Task<ListTranscriptionVocabulariesResponse> ListTranscriptionVocabulariesAsync(int? limit = default(int?), int? page = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<ListTranscriptionVocabulariesResponse> localVarResponse = await ListTranscriptionVocabulariesWithHttpInfoAsync(limit, page, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Transcription Vocabularies List all Transcription Vocabularies.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to include in the response (optional, default to 10)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListTranscriptionVocabulariesResponse)</returns>
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<ListTranscriptionVocabulariesResponse>> ListTranscriptionVocabulariesWithHttpInfoAsync(int? limit = default(int?), int? page = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListTranscriptionVocabulariesResponse>("/video/v1/transcription-vocabularies", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTranscriptionVocabularies", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Transcription Vocabulary Updates the details of a previously-created Transcription Vocabulary. Updates to Transcription Vocabularies are allowed while associated live streams are active. However, updates will not be applied to those streams while they are active.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="TRANSCRIPTION_VOCABULARY_ID">The ID of the Transcription Vocabulary.</param>
        /// <param name="updateTranscriptionVocabularyRequest"></param>
        /// <returns>TranscriptionVocabularyResponse</returns>
        public TranscriptionVocabularyResponse UpdateTranscriptionVocabulary(string TRANSCRIPTION_VOCABULARY_ID, UpdateTranscriptionVocabularyRequest updateTranscriptionVocabularyRequest)
        {
            Mux.Csharp.Sdk.Client.ApiResponse<TranscriptionVocabularyResponse> localVarResponse = UpdateTranscriptionVocabularyWithHttpInfo(TRANSCRIPTION_VOCABULARY_ID, updateTranscriptionVocabularyRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Transcription Vocabulary Updates the details of a previously-created Transcription Vocabulary. Updates to Transcription Vocabularies are allowed while associated live streams are active. However, updates will not be applied to those streams while they are active.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="TRANSCRIPTION_VOCABULARY_ID">The ID of the Transcription Vocabulary.</param>
        /// <param name="updateTranscriptionVocabularyRequest"></param>
        /// <returns>ApiResponse of TranscriptionVocabularyResponse</returns>
        public Mux.Csharp.Sdk.Client.ApiResponse<TranscriptionVocabularyResponse> UpdateTranscriptionVocabularyWithHttpInfo(string TRANSCRIPTION_VOCABULARY_ID, UpdateTranscriptionVocabularyRequest updateTranscriptionVocabularyRequest)
        {
            // verify the required parameter 'TRANSCRIPTION_VOCABULARY_ID' is set
            if (TRANSCRIPTION_VOCABULARY_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'TRANSCRIPTION_VOCABULARY_ID' when calling TranscriptionVocabulariesApi->UpdateTranscriptionVocabulary");
            }

            // verify the required parameter 'updateTranscriptionVocabularyRequest' is set
            if (updateTranscriptionVocabularyRequest == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'updateTranscriptionVocabularyRequest' when calling TranscriptionVocabulariesApi->UpdateTranscriptionVocabulary");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("TRANSCRIPTION_VOCABULARY_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(TRANSCRIPTION_VOCABULARY_ID)); // path parameter
            localVarRequestOptions.Data = updateTranscriptionVocabularyRequest;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<TranscriptionVocabularyResponse>("/video/v1/transcription-vocabularies/{TRANSCRIPTION_VOCABULARY_ID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTranscriptionVocabulary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Transcription Vocabulary Updates the details of a previously-created Transcription Vocabulary. Updates to Transcription Vocabularies are allowed while associated live streams are active. However, updates will not be applied to those streams while they are active.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="TRANSCRIPTION_VOCABULARY_ID">The ID of the Transcription Vocabulary.</param>
        /// <param name="updateTranscriptionVocabularyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TranscriptionVocabularyResponse</returns>
        public async System.Threading.Tasks.Task<TranscriptionVocabularyResponse> UpdateTranscriptionVocabularyAsync(string TRANSCRIPTION_VOCABULARY_ID, UpdateTranscriptionVocabularyRequest updateTranscriptionVocabularyRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<TranscriptionVocabularyResponse> localVarResponse = await UpdateTranscriptionVocabularyWithHttpInfoAsync(TRANSCRIPTION_VOCABULARY_ID, updateTranscriptionVocabularyRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Transcription Vocabulary Updates the details of a previously-created Transcription Vocabulary. Updates to Transcription Vocabularies are allowed while associated live streams are active. However, updates will not be applied to those streams while they are active.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="TRANSCRIPTION_VOCABULARY_ID">The ID of the Transcription Vocabulary.</param>
        /// <param name="updateTranscriptionVocabularyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TranscriptionVocabularyResponse)</returns>
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<TranscriptionVocabularyResponse>> UpdateTranscriptionVocabularyWithHttpInfoAsync(string TRANSCRIPTION_VOCABULARY_ID, UpdateTranscriptionVocabularyRequest updateTranscriptionVocabularyRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'TRANSCRIPTION_VOCABULARY_ID' is set
            if (TRANSCRIPTION_VOCABULARY_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'TRANSCRIPTION_VOCABULARY_ID' when calling TranscriptionVocabulariesApi->UpdateTranscriptionVocabulary");
            }

            // verify the required parameter 'updateTranscriptionVocabularyRequest' is set
            if (updateTranscriptionVocabularyRequest == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'updateTranscriptionVocabularyRequest' when calling TranscriptionVocabulariesApi->UpdateTranscriptionVocabulary");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("TRANSCRIPTION_VOCABULARY_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(TRANSCRIPTION_VOCABULARY_ID)); // path parameter
            localVarRequestOptions.Data = updateTranscriptionVocabularyRequest;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<TranscriptionVocabularyResponse>("/video/v1/transcription-vocabularies/{TRANSCRIPTION_VOCABULARY_ID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTranscriptionVocabulary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
