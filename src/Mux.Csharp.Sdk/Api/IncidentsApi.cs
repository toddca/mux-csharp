/*
 * Mux API
 *
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Mux.Csharp.Sdk.Client;
using Mux.Csharp.Sdk.Model;

namespace Mux.Csharp.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIncidentsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get an Incident
        /// </summary>
        /// <remarks>
        /// Returns the details of an incident.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="INCIDENT_ID">ID of the Incident</param>
        /// <returns>IncidentResponse</returns>
        IncidentResponse GetIncident(string INCIDENT_ID);

        /// <summary>
        /// Get an Incident
        /// </summary>
        /// <remarks>
        /// Returns the details of an incident.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="INCIDENT_ID">ID of the Incident</param>
        /// <returns>ApiResponse of IncidentResponse</returns>
        ApiResponse<IncidentResponse> GetIncidentWithHttpInfo(string INCIDENT_ID);
        /// <summary>
        /// List Incidents
        /// </summary>
        /// <remarks>
        /// Returns a list of incidents.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="orderBy">Value to order the results by (optional)</param>
        /// <param name="orderDirection">Sort order. (optional)</param>
        /// <param name="status">Status to filter incidents by (optional)</param>
        /// <param name="severity">Severity to filter incidents by (optional)</param>
        /// <returns>ListIncidentsResponse</returns>
        ListIncidentsResponse ListIncidents(int? limit = default(int?), int? page = default(int?), string orderBy = default(string), string orderDirection = default(string), string status = default(string), string severity = default(string));

        /// <summary>
        /// List Incidents
        /// </summary>
        /// <remarks>
        /// Returns a list of incidents.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="orderBy">Value to order the results by (optional)</param>
        /// <param name="orderDirection">Sort order. (optional)</param>
        /// <param name="status">Status to filter incidents by (optional)</param>
        /// <param name="severity">Severity to filter incidents by (optional)</param>
        /// <returns>ApiResponse of ListIncidentsResponse</returns>
        ApiResponse<ListIncidentsResponse> ListIncidentsWithHttpInfo(int? limit = default(int?), int? page = default(int?), string orderBy = default(string), string orderDirection = default(string), string status = default(string), string severity = default(string));
        /// <summary>
        /// List Related Incidents
        /// </summary>
        /// <remarks>
        /// Returns all the incidents that seem related to a specific incident.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="INCIDENT_ID">ID of the Incident</param>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="orderBy">Value to order the results by (optional)</param>
        /// <param name="orderDirection">Sort order. (optional)</param>
        /// <returns>ListRelatedIncidentsResponse</returns>
        ListRelatedIncidentsResponse ListRelatedIncidents(string INCIDENT_ID, int? limit = default(int?), int? page = default(int?), string orderBy = default(string), string orderDirection = default(string));

        /// <summary>
        /// List Related Incidents
        /// </summary>
        /// <remarks>
        /// Returns all the incidents that seem related to a specific incident.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="INCIDENT_ID">ID of the Incident</param>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="orderBy">Value to order the results by (optional)</param>
        /// <param name="orderDirection">Sort order. (optional)</param>
        /// <returns>ApiResponse of ListRelatedIncidentsResponse</returns>
        ApiResponse<ListRelatedIncidentsResponse> ListRelatedIncidentsWithHttpInfo(string INCIDENT_ID, int? limit = default(int?), int? page = default(int?), string orderBy = default(string), string orderDirection = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIncidentsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get an Incident
        /// </summary>
        /// <remarks>
        /// Returns the details of an incident.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="INCIDENT_ID">ID of the Incident</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IncidentResponse</returns>
        System.Threading.Tasks.Task<IncidentResponse> GetIncidentAsync(string INCIDENT_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get an Incident
        /// </summary>
        /// <remarks>
        /// Returns the details of an incident.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="INCIDENT_ID">ID of the Incident</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IncidentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IncidentResponse>> GetIncidentWithHttpInfoAsync(string INCIDENT_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Incidents
        /// </summary>
        /// <remarks>
        /// Returns a list of incidents.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="orderBy">Value to order the results by (optional)</param>
        /// <param name="orderDirection">Sort order. (optional)</param>
        /// <param name="status">Status to filter incidents by (optional)</param>
        /// <param name="severity">Severity to filter incidents by (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListIncidentsResponse</returns>
        System.Threading.Tasks.Task<ListIncidentsResponse> ListIncidentsAsync(int? limit = default(int?), int? page = default(int?), string orderBy = default(string), string orderDirection = default(string), string status = default(string), string severity = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Incidents
        /// </summary>
        /// <remarks>
        /// Returns a list of incidents.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="orderBy">Value to order the results by (optional)</param>
        /// <param name="orderDirection">Sort order. (optional)</param>
        /// <param name="status">Status to filter incidents by (optional)</param>
        /// <param name="severity">Severity to filter incidents by (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListIncidentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListIncidentsResponse>> ListIncidentsWithHttpInfoAsync(int? limit = default(int?), int? page = default(int?), string orderBy = default(string), string orderDirection = default(string), string status = default(string), string severity = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Related Incidents
        /// </summary>
        /// <remarks>
        /// Returns all the incidents that seem related to a specific incident.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="INCIDENT_ID">ID of the Incident</param>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="orderBy">Value to order the results by (optional)</param>
        /// <param name="orderDirection">Sort order. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListRelatedIncidentsResponse</returns>
        System.Threading.Tasks.Task<ListRelatedIncidentsResponse> ListRelatedIncidentsAsync(string INCIDENT_ID, int? limit = default(int?), int? page = default(int?), string orderBy = default(string), string orderDirection = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Related Incidents
        /// </summary>
        /// <remarks>
        /// Returns all the incidents that seem related to a specific incident.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="INCIDENT_ID">ID of the Incident</param>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="orderBy">Value to order the results by (optional)</param>
        /// <param name="orderDirection">Sort order. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListRelatedIncidentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListRelatedIncidentsResponse>> ListRelatedIncidentsWithHttpInfoAsync(string INCIDENT_ID, int? limit = default(int?), int? page = default(int?), string orderBy = default(string), string orderDirection = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIncidentsApi : IIncidentsApiSync, IIncidentsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IncidentsApi : IIncidentsApi
    {
        private Mux.Csharp.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IncidentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IncidentsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IncidentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IncidentsApi(string basePath)
        {
            this.Configuration = Mux.Csharp.Sdk.Client.Configuration.MergeConfigurations(
                Mux.Csharp.Sdk.Client.GlobalConfiguration.Instance,
                new Mux.Csharp.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Mux.Csharp.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Mux.Csharp.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Mux.Csharp.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IncidentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IncidentsApi(Mux.Csharp.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException(nameof(configuration));

            this.Configuration = Mux.Csharp.Sdk.Client.Configuration.MergeConfigurations(
                Mux.Csharp.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Mux.Csharp.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Mux.Csharp.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Mux.Csharp.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IncidentsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public IncidentsApi(Mux.Csharp.Sdk.Client.ISynchronousClient client, Mux.Csharp.Sdk.Client.IAsynchronousClient asyncClient, Mux.Csharp.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException(nameof(client));
            if (asyncClient == null) throw new ArgumentNullException(nameof(asyncClient));
            if (configuration == null) throw new ArgumentNullException(nameof(configuration));

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Mux.Csharp.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Mux.Csharp.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Mux.Csharp.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Mux.Csharp.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Mux.Csharp.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get an Incident Returns the details of an incident.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="INCIDENT_ID">ID of the Incident</param>
        /// <returns>IncidentResponse</returns>
        public IncidentResponse GetIncident(string INCIDENT_ID)
        {
            Mux.Csharp.Sdk.Client.ApiResponse<IncidentResponse> localVarResponse = GetIncidentWithHttpInfo(INCIDENT_ID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an Incident Returns the details of an incident.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="INCIDENT_ID">ID of the Incident</param>
        /// <returns>ApiResponse of IncidentResponse</returns>
        public Mux.Csharp.Sdk.Client.ApiResponse<IncidentResponse> GetIncidentWithHttpInfo(string INCIDENT_ID)
        {
            // verify the required parameter 'INCIDENT_ID' is set
            if (INCIDENT_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'INCIDENT_ID' when calling IncidentsApi->GetIncident");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("INCIDENT_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(INCIDENT_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<IncidentResponse>("/data/v1/incidents/{INCIDENT_ID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIncident", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an Incident Returns the details of an incident.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="INCIDENT_ID">ID of the Incident</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IncidentResponse</returns>
        public async System.Threading.Tasks.Task<IncidentResponse> GetIncidentAsync(string INCIDENT_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<IncidentResponse> localVarResponse = await GetIncidentWithHttpInfoAsync(INCIDENT_ID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an Incident Returns the details of an incident.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="INCIDENT_ID">ID of the Incident</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IncidentResponse)</returns>
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<IncidentResponse>> GetIncidentWithHttpInfoAsync(string INCIDENT_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'INCIDENT_ID' is set
            if (INCIDENT_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'INCIDENT_ID' when calling IncidentsApi->GetIncident");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("INCIDENT_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(INCIDENT_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<IncidentResponse>("/data/v1/incidents/{INCIDENT_ID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIncident", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Incidents Returns a list of incidents.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="orderBy">Value to order the results by (optional)</param>
        /// <param name="orderDirection">Sort order. (optional)</param>
        /// <param name="status">Status to filter incidents by (optional)</param>
        /// <param name="severity">Severity to filter incidents by (optional)</param>
        /// <returns>ListIncidentsResponse</returns>
        public ListIncidentsResponse ListIncidents(int? limit = default(int?), int? page = default(int?), string orderBy = default(string), string orderDirection = default(string), string status = default(string), string severity = default(string))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<ListIncidentsResponse> localVarResponse = ListIncidentsWithHttpInfo(limit, page, orderBy, orderDirection, status, severity);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Incidents Returns a list of incidents.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="orderBy">Value to order the results by (optional)</param>
        /// <param name="orderDirection">Sort order. (optional)</param>
        /// <param name="status">Status to filter incidents by (optional)</param>
        /// <param name="severity">Severity to filter incidents by (optional)</param>
        /// <returns>ApiResponse of ListIncidentsResponse</returns>
        public Mux.Csharp.Sdk.Client.ApiResponse<ListIncidentsResponse> ListIncidentsWithHttpInfo(int? limit = default(int?), int? page = default(int?), string orderBy = default(string), string orderDirection = default(string), string status = default(string), string severity = default(string))
        {
            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (orderDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "order_direction", orderDirection));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (severity != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "severity", severity));
            }

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListIncidentsResponse>("/data/v1/incidents", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListIncidents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Incidents Returns a list of incidents.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="orderBy">Value to order the results by (optional)</param>
        /// <param name="orderDirection">Sort order. (optional)</param>
        /// <param name="status">Status to filter incidents by (optional)</param>
        /// <param name="severity">Severity to filter incidents by (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListIncidentsResponse</returns>
        public async System.Threading.Tasks.Task<ListIncidentsResponse> ListIncidentsAsync(int? limit = default(int?), int? page = default(int?), string orderBy = default(string), string orderDirection = default(string), string status = default(string), string severity = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<ListIncidentsResponse> localVarResponse = await ListIncidentsWithHttpInfoAsync(limit, page, orderBy, orderDirection, status, severity, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Incidents Returns a list of incidents.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="orderBy">Value to order the results by (optional)</param>
        /// <param name="orderDirection">Sort order. (optional)</param>
        /// <param name="status">Status to filter incidents by (optional)</param>
        /// <param name="severity">Severity to filter incidents by (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListIncidentsResponse)</returns>
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<ListIncidentsResponse>> ListIncidentsWithHttpInfoAsync(int? limit = default(int?), int? page = default(int?), string orderBy = default(string), string orderDirection = default(string), string status = default(string), string severity = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (orderDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "order_direction", orderDirection));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (severity != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "severity", severity));
            }

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListIncidentsResponse>("/data/v1/incidents", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListIncidents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Related Incidents Returns all the incidents that seem related to a specific incident.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="INCIDENT_ID">ID of the Incident</param>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="orderBy">Value to order the results by (optional)</param>
        /// <param name="orderDirection">Sort order. (optional)</param>
        /// <returns>ListRelatedIncidentsResponse</returns>
        public ListRelatedIncidentsResponse ListRelatedIncidents(string INCIDENT_ID, int? limit = default(int?), int? page = default(int?), string orderBy = default(string), string orderDirection = default(string))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<ListRelatedIncidentsResponse> localVarResponse = ListRelatedIncidentsWithHttpInfo(INCIDENT_ID, limit, page, orderBy, orderDirection);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Related Incidents Returns all the incidents that seem related to a specific incident.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="INCIDENT_ID">ID of the Incident</param>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="orderBy">Value to order the results by (optional)</param>
        /// <param name="orderDirection">Sort order. (optional)</param>
        /// <returns>ApiResponse of ListRelatedIncidentsResponse</returns>
        public Mux.Csharp.Sdk.Client.ApiResponse<ListRelatedIncidentsResponse> ListRelatedIncidentsWithHttpInfo(string INCIDENT_ID, int? limit = default(int?), int? page = default(int?), string orderBy = default(string), string orderDirection = default(string))
        {
            // verify the required parameter 'INCIDENT_ID' is set
            if (INCIDENT_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'INCIDENT_ID' when calling IncidentsApi->ListRelatedIncidents");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("INCIDENT_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(INCIDENT_ID)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (orderDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "order_direction", orderDirection));
            }

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListRelatedIncidentsResponse>("/data/v1/incidents/{INCIDENT_ID}/related", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRelatedIncidents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Related Incidents Returns all the incidents that seem related to a specific incident.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="INCIDENT_ID">ID of the Incident</param>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="orderBy">Value to order the results by (optional)</param>
        /// <param name="orderDirection">Sort order. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListRelatedIncidentsResponse</returns>
        public async System.Threading.Tasks.Task<ListRelatedIncidentsResponse> ListRelatedIncidentsAsync(string INCIDENT_ID, int? limit = default(int?), int? page = default(int?), string orderBy = default(string), string orderDirection = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<ListRelatedIncidentsResponse> localVarResponse = await ListRelatedIncidentsWithHttpInfoAsync(INCIDENT_ID, limit, page, orderBy, orderDirection, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Related Incidents Returns all the incidents that seem related to a specific incident.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="INCIDENT_ID">ID of the Incident</param>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="orderBy">Value to order the results by (optional)</param>
        /// <param name="orderDirection">Sort order. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListRelatedIncidentsResponse)</returns>
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<ListRelatedIncidentsResponse>> ListRelatedIncidentsWithHttpInfoAsync(string INCIDENT_ID, int? limit = default(int?), int? page = default(int?), string orderBy = default(string), string orderDirection = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'INCIDENT_ID' is set
            if (INCIDENT_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'INCIDENT_ID' when calling IncidentsApi->ListRelatedIncidents");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("INCIDENT_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(INCIDENT_ID)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (orderDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "order_direction", orderDirection));
            }

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListRelatedIncidentsResponse>("/data/v1/incidents/{INCIDENT_ID}/related", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRelatedIncidents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
